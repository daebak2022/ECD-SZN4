{
  "version": 3,
  "sources": ["../../@noble/hashes/src/hmac.ts", "../../@noble/hashes/src/_sha2.ts", "../../@noble/hashes/src/sha256.ts", "browser-external:crypto", "../../@noble/secp256k1/lib/index.js", "../../ethereum-cryptography/secp256k1.js", "dep:ethereum-cryptography_secp256k1"],
  "sourcesContent": [null, null, null, "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"crypto\" has been externalized for browser compatibility. Cannot access \"crypto.${key}\" in client code.`)\n    }\n  }\n}))", "\"use strict\";\n/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.utils = exports.schnorr = exports.verify = exports.signSync = exports.sign = exports.getSharedSecret = exports.recoverPublicKey = exports.getPublicKey = exports.Signature = exports.Point = exports.CURVE = void 0;\nconst nodeCrypto = require(\"crypto\");\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nexports.CURVE = CURVE;\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nexports.Point = Point;\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nexports.Signature = Signature;\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return exports.utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nfunction getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexports.getPublicKey = getPublicKey;\nfunction recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nexports.recoverPublicKey = recoverPublicKey;\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nfunction getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nexports.getSharedSecret = getSharedSecret;\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = exports.utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nexports.sign = sign;\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexports.signSync = signSync;\nconst vopts = { strict: true };\nfunction verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nexports.verify = verify;\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = exports.utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = exports.utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = exports.utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await exports.utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(exports.utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexports.schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexports.utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => exports.utils.hashToPrivateKey(exports.utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await exports.utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return exports.utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(exports.utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.schnorr = exports.Signature = exports.Point = exports.CURVE = exports.utils = exports.getSharedSecret = exports.recoverPublicKey = exports.verify = exports.signSync = exports.sign = exports.getPublicKey = void 0;\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst secp256k1_1 = require(\"@noble/secp256k1\");\nvar secp256k1_2 = require(\"@noble/secp256k1\");\nObject.defineProperty(exports, \"getPublicKey\", { enumerable: true, get: function () { return secp256k1_2.getPublicKey; } });\nObject.defineProperty(exports, \"sign\", { enumerable: true, get: function () { return secp256k1_2.sign; } });\nObject.defineProperty(exports, \"signSync\", { enumerable: true, get: function () { return secp256k1_2.signSync; } });\nObject.defineProperty(exports, \"verify\", { enumerable: true, get: function () { return secp256k1_2.verify; } });\nObject.defineProperty(exports, \"recoverPublicKey\", { enumerable: true, get: function () { return secp256k1_2.recoverPublicKey; } });\nObject.defineProperty(exports, \"getSharedSecret\", { enumerable: true, get: function () { return secp256k1_2.getSharedSecret; } });\nObject.defineProperty(exports, \"utils\", { enumerable: true, get: function () { return secp256k1_2.utils; } });\nObject.defineProperty(exports, \"CURVE\", { enumerable: true, get: function () { return secp256k1_2.CURVE; } });\nObject.defineProperty(exports, \"Point\", { enumerable: true, get: function () { return secp256k1_2.Point; } });\nObject.defineProperty(exports, \"Signature\", { enumerable: true, get: function () { return secp256k1_2.Signature; } });\nObject.defineProperty(exports, \"schnorr\", { enumerable: true, get: function () { return secp256k1_2.schnorr; } });\n// Enable sync API for noble-secp256k1\nsecp256k1_1.utils.hmacSha256Sync = (key, ...messages) => {\n    const h = hmac_1.hmac.create(sha256_1.sha256, key);\n    messages.forEach(msg => h.update(msg));\n    return h.digest();\n};\n", "export default require(\"./node_modules/ethereum-cryptography/secp256k1.js\");"],
  "mappings": "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",
  "names": ["d", "hashLen"]
}
